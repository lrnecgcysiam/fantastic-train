To achieve this in Node.js, you can use the `fs` module to read files in a directory recursively and then write the file paths to a new file. Here's a basic example to get you started:

1. First, create a new Node.js file (e.g., `readFiles.js`) and add the following code:

```javascript
const fs = require('fs');
const path = require('path');

function readFilesRecursively(directory, outputFile) {
    fs.readdir(directory, (err, files) => {
        if (err) {
            console.error('Error reading directory:', err);
            return;
        }

        files.forEach((file) => {
            const filePath = path.join(directory, file);

            fs.stat(filePath, (err, stats) => {
                if (err) {
                    console.error('Error getting file stats:', err);
                    return;
                }

                if (stats.isDirectory()) {
                    readFilesRecursively(filePath, outputFile);
                } else {
                    fs.appendFileSync(outputFile, filePath + '\n');
                }
            });
        });
    });
}

const outputFilePath = 'output.txt';
const directoryPath = './path/to/your/directory';

readFilesRecursively(directoryPath, outputFilePath);
```

2. Replace `'./path/to/your/directory'` with the path to the directory you want to read files from.

3. Run the script by executing `node readFiles.js` in your terminal. This will recursively read all files in the specified directory and write their paths to `output.txt`.

After running the script, you can use `grep` to search for specific file paths in the `output.txt` file. For example, to search for a specific pathname, you can use:

```bash
grep 'your/pathname' output.txt
```

This will output any lines in `output.txt` that contain the specified pathname.

Feel free to modify the code to suit your specific requirements or if you need further assistance!